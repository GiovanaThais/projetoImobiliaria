/*
* @Copyright (c) 2011 Aur√©lio Saraiva, Diego Plentz
* @Page http://github.com/plentz/jquery-maskmoney
* try at http://plentz.org/maskmoney

* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/

/*
* @Version: 1.4.1
* @Release: 2011-11-01
*/
;(function ($) {
  $.fn.maskMoney = function (settings) {
    settings = $.extend({
      symbol: 'US$',
      showSymbol: false,
      symbolStay: false,
      thousands: ',',
      decimal: '.',
      precision: 2,
      defaultZero: true,
      allowZero: false,
      allowNegative: false
    }, settings);

    return this.each(function () {
      var input = $(this);
      var dirty = false;

      function markAsDirty() {
        dirty = true;
      }

      function clearDirt() {
        dirty = false;
      }

      function keypressEvent(e) {
        e = e || window.event;
        var k = e.charCode || e.keyCode || e.which;
        if (k == undefined) return false; //needed to handle an IE "special" event
        if (input.attr('readonly') && (k != 13 && k != 9)) return false; // don't allow editing of readonly fields but allow tab/enter

        if (k < 48 || k > 57) { // any key except the numbers 0-9
          if (k == 45) { // -(minus) key
            markAsDirty();
            input.val(changeSign(input));
            return false;
          } else if (k == 43) { // +(plus) key
            markAsDirty();
            input.val(input.val().replace('-', ''));
            return false;
          } else if (k == 13 || k == 9) { // enter key or tab key
            if (dirty) {
              clearDirt();
              $(this).change();
            }
            return true;
          } else if (k == 37 || k == 39) { // left arrow key or right arrow key
            return true;
          } else { // any other key with keycode less than 48 and greater than 57
            preventDefault(e);
            return true;
          }
        } else if (input.val().length >= input.attr('maxlength')) {
          return false;
        } else {
          preventDefault(e);

          var key = String.fromCharCode(k);
          var x = input.get(0);
          var selection = input.getInputSelection(x);
          var startPos = selection.start;
          var endPos = selection.end;
          x.value = x.value.substring(0, startPos) + key + x.value.substring(endPos, x.value.length);
          maskAndPosition(x, startPos + 1);
          markAsDirty();
          return false;
        }
      }

      function keydownEvent(e) {
        e = e || window.event;
        var k = e.charCode || e.keyCode || e.which;
        if (k == undefined) return false; //needed to handle an IE "special" event
        if (input.attr('readonly') && (k != 13 && k != 9)) return false; // don't allow editing of readonly fields but allow tab/enter

        var x = input.get(0);
        var selection = input.getInputSelection(x);
        var startPos = selection.start;
        var endPos = selection.end;

        if (k == 8) { // backspace key
          preventDefault(e);

          if (startPos == endPos) {
            // Remove single character
            x.value = x.value.substring(0, startPos - 1) + x.value.substring(endPos, x.value.length);
            startPos = startPos - 1;
          } else {
            // Remove multiple characters
            x.value = x.value.substring(0, startPos) + x.value.substring(endPos, x.value.length);
          }
          maskAndPosition(x, startPos);
          markAsDirty();
          return false;
        } else if (k == 9) { // tab key
          if (dirty) {
            $(this).change();
            clearDirt();
          }
          return true;
        } else if (k == 46 || k == 63272) { // delete key (with special case for safari)
          preventDefault(e);
          if (x.selectionStart == x.selectionEnd) {
            // Remove single character
            x.value = x.value.substring(0, startPos) + x.value.substring(endPos + 1, x.value.length);
          } else {
            //Remove multiple characters
            x.value = x.value.substring(0, startPos) + x.value.substring(endPos, x.value.length);
          }
          maskAndPosition(x, startPos);
          markAsDirty();
          return false;
        } else { // any other key
          return true;
        }
      }

      function focusEvent(e) {
        var mask_money = getDefaultMask();
        if (input.val() == mask_money) {
          input.val('');
        } else if (input.val() == '' && settings.defaultZero) {
          input.val(setSymbol(mask_money));
        } else {
          input.val(setSymbol(input.val()));
        }
        if (this.createTextRange) {
          var textRange = this.createTextRange();
          textRange.collapse(false); // set the cursor at the end of the input
          textRange.select();
        }
      }

      function blurEvent(e) {
        if ($.browser.msie) {
          keypressEvent(e);
        }

        if (input.val() == '' || input.val() == setSymbol(getDefaultMask()) || input.val() == settings.symbol) {
          if (!settings.allowZero) input.val('');
          else if (!settings.symbolStay) input.val(getDefaultMask());
          else input.val(setSymbol(getDefaultMask()));
        } else {
          if (!settings.symbolStay) input.val(input.val().replace(settings.symbol, ''));
          else if (settings.symbolStay && input.val() == settings.symbol) input.val(setSymbol(getDefaultMask()));
        }
      }

      function preventDefault(e) {
        if (e.preventDefault) { //standard browsers
          e.preventDefault();
        } else { // internet explorer
          e.returnValue = false
        }
      }

      function maskAndPosition(x, startPos) {
        var originalLen = input.val().length;
        input.val(maskValue(x.value));
        var newLen = input.val().length;
        startPos = startPos - (originalLen - newLen);
        input.setCursorPosition(startPos);
      }

      function maskValue(v) {
        v = v.replace(settings.symbol, '');

        var strCheck = '0123456789';
        var len = v.length;
        var a = '', t = '', neg = '';

        if (len != 0 && v.charAt(0) == '-') {
          v = v.replace('-', '');
          if (settings.allowNegative) {
            neg = '-';
          }
        }

        if (len == 0) {
          if (!settings.defaultZero) return t;
          t = '0.00';
        }

        for (var i = 0; i < len; i++) {
          if ((v.charAt(i) != '0') && (v.charAt(i) != settings.decimal)) break;
        }

        for (; i < len; i++) {
          if (strCheck.indexOf(v.charAt(i)) != -1) a += v.charAt(i);
        }

        var n = parseFloat(a);
        n = isNaN(n) ? 0 : n / Math.pow(10, settings.precision);
        t = n.toFixed(settings.precision);

        i = settings.precision == 0 ? 0 : 1;
        var p, d = (t = t.split('.'))[i].substr(0, settings.precision);
        for (p = (t = t[0]).length; (p -= 3) >= 1;) {
          t = t.substr(0, p) + settings.thousands + t.substr(p);
        }

        return (settings.precision > 0)
          ? setSymbol(neg + t + settings.decimal + d + Array((settings.precision + 1) - d.length).join(0))
          : setSymbol(neg + t);
      }

      function mask_money() {
        var value = input.val();
        input.val(maskValue(value));
      }

      function getDefaultMask() {
        var n = parseFloat('0') / Math.pow(10, settings.precision);
        return (n.toFixed(settings.precision)).replace(new RegExp('\\.', 'g'), settings.decimal);
      }

      function setSymbol(v) {
        if (settings.showSymbol) {
          if (v.substr(0, settings.symbol.length) != settings.symbol) return settings.symbol + v;
        }
        return v;
      }

      function changeSign(i) {
        if (settings.allowNegative) {
          var vic = i.val();
          if (i.val() != '' && i.val().charAt(0) == '-') {
            return i.val().replace('-', '');
          } else {
            return '-' + i.val();
          }
        } else {
          return i.val();
        }
      }

      input.bind('keypress.maskMoney', keypressEvent);
      input.bind('keydown.maskMoney', keydownEvent);
      input.bind('blur.maskMoney', blurEvent);
      input.bind('focus.maskMoney', focusEvent);
      input.bind('mask_money', mask_money);

      input.one('unmaskMoney', function () {
        input.unbind('.maskMoney');

        if ($.browser.msie) {
          this.onpaste = null;
        } else if ($.browser.mozilla) {
          this.removeEventListener('input', blurEvent, false);
        }
      });
    });
  };

  $.fn.unmaskMoney = function () {
    return this.trigger('unmaskMoney');
  };

  $.fn.mask_money = function () {
    return this.trigger('mask_money');
  };

  $.fn.setCursorPosition = function (pos) {
    this.each(function (index, elem) {
      if (elem.setSelectionRange) {
        elem.focus();
        elem.setSelectionRange(pos, pos);
      } else if (elem.createTextRange) {
        var range = elem.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    });
    return this;
  };

  $.fn.getInputSelection = function (el) {
    var start = 0, end = 0, normalizedValue, range, textInputRange, len, endRange;

    if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
      start = el.selectionStart;
      end = el.selectionEnd;
    } else {
      range = document.selection.createRange();

      if (range && range.parentElement() == el) {
        len = el.value.length;
        normalizedValue = el.value.replace(/\r\n/g, "\n");

        // Create a working TextRange that lives only in the input
        textInputRange = el.createTextRange();
        textInputRange.moveToBookmark(range.getBookmark());

        // Check if the start and end of the selection are at the very end
        // of the input, since moveStart/moveEnd doesn't return what we want
        // in those cases
        endRange = el.createTextRange();
        endRange.collapse(false);

        if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
          start = end = len;
        } else {
          start = -textInputRange.moveStart("character", -len);
          start += normalizedValue.slice(0, start).split("\n").length - 1;

          if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
            end = len;
          } else {
            end = -textInputRange.moveEnd("character", -len);
            end += normalizedValue.slice(0, end).split("\n").length - 1;
          }
        }
      }
    }

    return {
      start: start,
      end: end
    };
  }
})(jQuery);œŒc´Ñ      bñŒÂbñŒÂDW®2bñ‹‰   ò    O^partitionKey=%28https%2Ctangerino.com.br%29,:https://app.tangerino.com.br/Tangerino/resources/com.frw.tangerino.web.pages.web.BasePage/js/maskMoney.js strongly-framed 1 security-info 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 request-method GET response-head HTTP/2 200 OK
date: Wed, 01 Jun 2022 02:28:37 GMT
content-type: text/javascript;charset=UTF-8
content-length: 11731
x-powered-by: Servlet/3.0 JSP/2.2 (GlassFish Server Open Source Edition 3.1.2.2 Java/Oracle Corporation/1.7)
server: GlassFish Server Open Source Edition 3.1.2.2
last-modified: Tue, 31 May 2022 06:40:23 GMT
expires: Wed, 01 Jun 2022 03:28:37 GMT
cache-control: max-age=3600
X-Firefox-Spdy: h2
 original-response-headers date: Wed, 01 Jun 2022 02:28:37 GMT
content-type: text/javascript;charset=UTF-8
content-length: 11731
set-cookie: AWSALB=MinMcLY/gvDrsMPryFjzqjlHKUUejzZ27+Br40kstd6IVloHXozzgZtdF3x+aunG7PuPCOGDHVsNX7c/Eo5jDdt4lyYgCMkcQ4DujZwgjoxVRP1vE24FdCnr8XEE; Expires=Wed, 08 Jun 2022 02:28:37 GMT; Path=/
set-cookie: AWSALBCORS=MinMcLY/gvDrsMPryFjzqjlHKUUejzZ27+Br40kstd6IVloHXozzgZtdF3x+aunG7PuPCOGDHVsNX7c/Eo5jDdt4lyYgCMkcQ4DujZwgjoxVRP1vE24FdCnr8XEE; Expires=Wed, 08 Jun 2022 02:28:37 GMT; Path=/; SameSite=None; Secure
x-powered-by: Servlet/3.0 JSP/2.2 (GlassFish Server Open Source Edition 3.1.2.2 Java/Oracle Corporation/1.7)
server: GlassFish Server Open Source Edition 3.1.2.2
last-modified: Tue, 31 May 2022 06:40:23 GMT
expires: Wed, 01 Jun 2022 03:28:37 GMT
cache-control: max-age=3600
X-Firefox-Spdy: h2
 ctid 2 uncompressed-len 0 net-response-time-onstart 876 net-response-time-onstop 878   -”